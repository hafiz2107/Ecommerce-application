{"version":3,"file":"index.production.js","sources":["../../src/types/Calculator.ts","../../src/checks/messages.ts","../../src/helpers/assert.ts","../../src/utils/equal.ts","../../src/utils/greaterThan.ts","../../src/utils/greaterThanOrEqual.ts","../../src/utils/lessThan.ts","../../src/utils/distribute.ts","../../src/utils/getAmountAndScale.ts","../../src/utils/isScaledAmount.ts","../../src/utils/isEven.ts","../../src/utils/isHalf.ts","../../src/utils/maximum.ts","../../src/api/haveSameCurrency.ts","../../src/api/transformScale.ts","../../src/api/normalizeScale.ts","../../src/api/haveSameAmount.ts","../../src/api/lessThanOrEqual.ts","../../src/utils/lessThanOrEqual.ts","../../src/api/minimum.ts","../../src/utils/minimum.ts","../../src/api/toUnit.ts","../../src/api/convert.ts","../../src/helpers/createDinero.ts","../../src/round/down.ts","../../src/api/equal.ts","../../src/round/halfAwayFromZero.ts","../../src/round/halfDown.ts","../../src/round/halfEven.ts","../../src/round/halfOdd.ts","../../src/round/halfTowardsZero.ts","../../src/round/halfUp.ts","../../src/api/hasSubUnits.ts","../../src/api/isNegative.ts","../../src/api/isPositive.ts","../../src/api/isZero.ts","../../src/api/multiply.ts","../../src/api/add.ts","../../src/api/allocate.ts","../../src/api/compare.ts","../../src/utils/compare.ts","../../src/api/greaterThan.ts","../../src/api/greaterThanOrEqual.ts","../../src/api/lessThan.ts","../../src/api/maximum.ts","../../src/api/subtract.ts","../../src/api/toFormat.ts","../../src/api/toSnapshot.ts","../../src/api/trimScale.ts","../../src/utils/countTrailingZeros.ts","../../src/round/up.ts"],"sourcesContent":["/* eslint-disable functional/no-mixed-type */\nimport type { BinaryOperation, TransformOperation, UnaryOperation } from '.';\n\nexport enum ComparisonOperator {\n  LT = -1,\n  EQ = 0,\n  GT = 1,\n}\n\nexport type Calculator<TInput> = {\n  readonly add: BinaryOperation<TInput>;\n  readonly compare: BinaryOperation<TInput, ComparisonOperator>;\n  readonly decrement: UnaryOperation<TInput>;\n  readonly integerDivide: BinaryOperation<TInput>;\n  readonly increment: UnaryOperation<TInput>;\n  readonly modulo: BinaryOperation<TInput>;\n  readonly multiply: BinaryOperation<TInput>;\n  readonly power: BinaryOperation<TInput>;\n  readonly subtract: BinaryOperation<TInput>;\n  readonly toNumber: TransformOperation<TInput, number>;\n  readonly zero: () => TInput;\n};\n","export const INVALID_AMOUNT_MESSAGE = 'Amount is invalid.';\nexport const INVALID_SCALE_MESSAGE = 'Scale is invalid.';\nexport const INVALID_RATIOS_MESSAGE = 'Ratios are invalid.';\nexport const UNEQUAL_SCALES_MESSAGE = 'Objects must have the same scale.';\nexport const UNEQUAL_CURRENCIES_MESSAGE =\n  'Objects must have the same currency.';\n","/* eslint-disable functional/no-throw-statement, valid-jsdoc */\n/**\n * Assert a condition.\n *\n * @param condition - The condition to verify.\n * @param message - The error message to throw.\n *\n * @throws If the condition isn't met.\n */\nexport function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(`[Dinero.js] ${message}`);\n  }\n}\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype EqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns an equal function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The equal function.\n */\nexport function equal<TAmount>(calculator: EqualCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.EQ;\n  };\n}\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype GreaterThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThan function.\n */\nexport function greaterThan<TAmount>(\n  calculator: GreaterThanCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.GT;\n  };\n}\n","import { equal } from './equal';\nimport { greaterThan } from './greaterThan';\n\nimport type { Calculator } from '../types';\n\ntype GreaterThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThanOrEqual function.\n */\nexport function greaterThanOrEqual<TAmount>(\n  calculator: GreaterThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      greaterThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype LessThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThan function.\n */\nexport function lessThan<TAmount>(calculator: LessThanCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.LT;\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/immutable-data, functional/no-expression-statement */\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\nimport { greaterThanOrEqual } from './greaterThanOrEqual';\nimport { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype DistributeCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a distribute function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The distribute function.\n */\nexport function distribute<TAmount>(calculator: DistributeCalculator<TAmount>) {\n  return (value: TAmount, ratios: readonly TAmount[]) => {\n    const equalFn = equal(calculator);\n    const greaterThanFn = greaterThan(calculator);\n    const lessThanFn = lessThan(calculator);\n    const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n    const zero = calculator.zero();\n    const one = calculator.increment(zero);\n\n    const total = ratios.reduce((a, b) => calculator.add(a, b), zero);\n\n    if (equalFn(total, zero)) {\n      return ratios;\n    }\n\n    let remainder = value;\n\n    const shares = ratios.map((ratio) => {\n      const share =\n        calculator.integerDivide(calculator.multiply(value, ratio), total) ||\n        zero;\n\n      remainder = calculator.subtract(remainder, share);\n\n      return share;\n    });\n\n    const isPositive = greaterThanOrEqualFn(value, zero);\n    const compare = isPositive ? greaterThanFn : lessThanFn;\n    const amount = isPositive ? one : calculator.decrement(zero);\n\n    let i = 0;\n\n    while (compare(remainder, zero)) {\n      if (!equalFn(ratios[i], zero)) {\n        shares[i] = calculator.add(shares[i], amount);\n        remainder = calculator.subtract(remainder, amount);\n      }\n\n      i++;\n    }\n\n    return shares;\n  };\n}\n","import { isScaledAmount } from './isScaledAmount';\n\nimport type { ScaledAmount } from '../types';\n\nexport function getAmountAndScale<TAmount>(\n  value: ScaledAmount<TAmount> | TAmount,\n  zero: TAmount\n) {\n  if (isScaledAmount(value)) {\n    return { amount: value.amount, scale: value?.scale ?? zero };\n  }\n\n  return { amount: value, scale: zero };\n}\n","import type { Rate, ScaledAmount } from '../types';\n\nexport function isScaledAmount<TAmount>(\n  amount: Rate<TAmount>\n): amount is ScaledAmount<TAmount> {\n  return (amount as ScaledAmount<TAmount>)?.hasOwnProperty('amount');\n}\n","/**\n * Return whether a number is even.\n *\n * @param value - The number to test.\n *\n * @returns Whether the number is even.\n */\nexport function isEven(value: number) {\n  return value % 2 === 0;\n}\n","/**\n * Return whether a number is half.\n *\n * @param value - The number to test.\n *\n * @returns Whether the number is half.\n */\nexport function isHalf(value: number) {\n  return Math.abs(value) % 1 === 0.5;\n}\n","import { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype MaximumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a maximum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The maximum function.\n */\nexport function maximum<TAmount>(calculator: MaximumCalculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return lessThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import { equal } from '../utils';\n\nimport type { Dinero } from '../types';\n\nexport function haveSameCurrency<TAmount>(\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n) {\n  const [firstDinero, ...otherDineros] = dineroObjects;\n  const { currency: comparator } = firstDinero.toJSON();\n  const equalFn = equal(firstDinero.calculator);\n\n  return otherDineros.every((d) => {\n    const { currency: subject } = d.toJSON();\n\n    return (\n      subject.code === comparator.code &&\n      equalFn(subject.base, comparator.base) &&\n      equalFn(subject.exponent, comparator.exponent)\n    );\n  });\n}\n","import { greaterThan } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type TransformScaleParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newScale: TAmount\n];\n\nexport function transformScale<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return function transformScaleFn(\n    ...[dineroObject, newScale]: TransformScaleParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    const isNewScaleLarger = greaterThanFn(newScale, scale);\n    const operation = isNewScaleLarger\n      ? calculator.multiply\n      : calculator.integerDivide;\n    const terms = isNewScaleLarger\n      ? ([newScale, scale] as const)\n      : ([scale, newScale] as const);\n\n    const factor = calculator.power(\n      currency.base,\n      calculator.subtract(...terms)\n    );\n\n    return dineroObject.create({\n      amount: operation(amount, factor),\n      currency,\n      scale: newScale,\n    });\n  };\n}\n","import { equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type NormalizeScaleParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function normalizeScale<TAmount>(calculator: Calculator<TAmount>) {\n  const maximumFn = maximum(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _normalizeScale(\n    ...[dineroObjects]: NormalizeScaleParams<TAmount>\n  ) {\n    const highestScale = dineroObjects.reduce((highest, current) => {\n      const { scale } = current.toJSON();\n\n      return maximumFn([highest, scale]);\n    }, calculator.zero());\n\n    return dineroObjects.map((d) => {\n      const { scale } = d.toJSON();\n\n      return !equalFn(scale, highestScale)\n        ? convertScaleFn(d, highestScale)\n        : d;\n    });\n  };\n}\n","import { equal } from '../utils';\n\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type HaveSameAmountParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function haveSameAmount<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _haveSameAmount(\n    ...[dineroObjects]: HaveSameAmountParams<TAmount>\n  ) {\n    const [firstDinero, ...otherDineros] = normalizeFn(dineroObjects);\n    const { amount: comparatorAmount } = firstDinero.toJSON();\n\n    return otherDineros.every((d) => {\n      const { amount: subjectAmount } = d.toJSON();\n\n      return equalFn(subjectAmount, comparatorAmount);\n    });\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { lessThanOrEqual as lte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type LessThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanOrEqualFn = lte(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanOrEqualFn = unsafeLessThanOrEqual(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","import { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype LessThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThanOrEqual function.\n */\nexport function lessThanOrEqual<TAmount>(\n  calculator: LessThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      lessThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { minimum as min } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type MinimumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const minFn = min(calculator);\n\n  return function minimum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = minFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const minFn = unsafeMinimum(calculator);\n\n  return function maximum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return minFn(normalizedDineroObjects);\n  };\n}\n","import { greaterThan } from './greaterThan';\n\nimport type { Calculator } from '../types';\n\ntype MinimumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a minimum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The minimum function.\n */\nexport function minimum<TAmount>(calculator: MinimumCalculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return greaterThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import type { Calculator, Dinero, RoundingOptions } from '../types';\n\nexport type ToUnitParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  options?: RoundingOptions<TAmount>\n];\n\nexport function toUnit<TAmount>(calculator: Calculator<TAmount>) {\n  return function toUnitFn(...[dineroObject, options]: ToUnitParams<TAmount>) {\n    const round = options?.round || identity;\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { power, toNumber } = calculator;\n\n    const toUnitFactor = toNumber(power(currency.base, scale));\n    const factor = toNumber(power(currency.base, options?.digits ?? scale));\n\n    return round((toNumber(amount) / toUnitFactor) * factor) / factor;\n  };\n}\n\nfunction identity<TValue>(value: TValue) {\n  return value;\n}\n","import { getAmountAndScale, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, Rates } from '../types';\nimport type { Currency } from '@dinero.js/currencies';\n\nexport type ConvertParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newCurrency: Currency<TAmount>,\n  rates: Rates<TAmount>\n];\n\nexport function convert<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const zero = calculator.zero();\n\n  return function convertFn(\n    ...[dineroObject, newCurrency, rates]: ConvertParams<TAmount>\n  ) {\n    const rate = rates[newCurrency.code];\n    const { amount, scale } = dineroObject.toJSON();\n    const { amount: rateAmount, scale: rateScale } = getAmountAndScale(\n      rate,\n      zero\n    );\n\n    const newScale = calculator.add(scale, rateScale);\n\n    return convertScaleFn(\n      dineroObject.create({\n        amount: calculator.multiply(amount, rateAmount),\n        currency: newCurrency,\n        scale: newScale,\n      }),\n      maximumFn([newScale, newCurrency.exponent])\n    );\n  };\n}\n","/* eslint-disable functional/no-mixed-type, functional/no-return-void, functional/no-expression-statement */\nimport type { Calculator, Dinero, DineroOptions } from '../types';\n\nexport type CreateDineroOptions<TAmount> = {\n  readonly calculator: Calculator<TAmount>;\n  readonly onCreate?: (options: DineroOptions<TAmount>) => void;\n};\n\nexport function createDinero<TAmount>({\n  calculator,\n  onCreate,\n}: CreateDineroOptions<TAmount>) {\n  return function dinero({\n    amount,\n    currency,\n    scale = currency.exponent,\n  }: DineroOptions<TAmount>): Dinero<TAmount> {\n    onCreate?.({ amount, currency, scale });\n\n    return {\n      calculator,\n      create: dinero,\n      toJSON() {\n        return {\n          amount,\n          currency,\n          scale,\n        };\n      },\n    };\n  };\n}\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number down.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const down: RoundingMode = (value) => {\n  return Math.floor(value);\n};\n","import { haveSameAmount } from './haveSameAmount';\nimport { haveSameCurrency } from './haveSameCurrency';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type EqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nexport function equal<TAmount>(calculator: Calculator<TAmount>) {\n  return function _equal(...[dineroObject, comparator]: EqualParams<TAmount>) {\n    return (\n      haveSameAmount(calculator)([dineroObject, comparator]) &&\n      haveSameCurrency([dineroObject, comparator])\n    );\n  };\n}\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest integer farthest from zero.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfAwayFromZero: RoundingMode = (value) => {\n  return isHalf(value)\n    ? Math.sign(value) * Math.ceil(Math.abs(value))\n    : Math.round(value);\n};\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values down.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfDown: RoundingMode = (value) => {\n  return isHalf(value) ? Math.floor(value) : Math.round(value);\n};\n","import { isEven, isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest even integer.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfEven: RoundingMode = (value) => {\n  const rounded = Math.round(value);\n\n  if (!isHalf(value)) {\n    return rounded;\n  }\n\n  return isEven(rounded) ? rounded : rounded - 1;\n};\n","import { isEven, isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest odd integer.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfOdd: RoundingMode = (value) => {\n  const rounded = Math.round(value);\n\n  if (!isHalf(value)) {\n    return rounded;\n  }\n\n  return isEven(rounded) ? rounded - 1 : rounded;\n};\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest integer closest to zero.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfTowardsZero: RoundingMode = (value) => {\n  return isHalf(value)\n    ? Math.sign(value) * Math.floor(Math.abs(value))\n    : Math.round(value);\n};\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values up.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfUp: RoundingMode = (value) => {\n  return Math.round(value);\n};\n","import { equal } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type HasSubUnitsParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function hasSubUnits<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _hasSubUnits(...[dineroObject]: HasSubUnitsParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    return !equalFn(\n      calculator.modulo(amount, calculator.power(currency.base, scale)),\n      calculator.zero()\n    );\n  };\n}\n","import { lessThan } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsNegativeParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isNegative<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return function _isNegative(...[dineroObject]: IsNegativeParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return lessThanFn(amount, calculator.zero());\n  };\n}\n","import { greaterThanOrEqual } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsPositiveParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isPositive<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n  return function _isPositive(...[dineroObject]: IsPositiveParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return greaterThanOrEqualFn(amount, calculator.zero());\n  };\n}\n","import { equal } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsZeroParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function isZero<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _isZero(...[dineroObject]: IsZeroParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return equalFn(amount, calculator.zero());\n  };\n}\n","import { getAmountAndScale } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\n\nexport type MultiplyParams<TAmount> = readonly [\n  multiplicand: Dinero<TAmount>,\n  multiplier: ScaledAmount<TAmount> | TAmount\n];\n\nexport function multiply<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const zero = calculator.zero();\n\n  return function multiplyFn(\n    ...[multiplicand, multiplier]: MultiplyParams<TAmount>\n  ) {\n    const { amount, currency, scale } = multiplicand.toJSON();\n    const { amount: multiplierAmount, scale: multiplierScale } =\n      getAmountAndScale(multiplier, zero);\n\n    const newScale = calculator.add(scale, multiplierScale);\n\n    return convertScaleFn(\n      multiplicand.create({\n        amount: calculator.multiply(amount, multiplierAmount),\n        currency,\n        scale: newScale,\n      }),\n      newScale\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type AddParams<TAmount> = readonly [\n  augend: Dinero<TAmount>,\n  addend: Dinero<TAmount>\n];\n\nfunction unsafeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const { amount: augendAmount, currency, scale } = augend.toJSON();\n    const { amount: addendAmount } = addend.toJSON();\n\n    const amount = calculator.add(augendAmount, addendAmount);\n\n    return augend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const addFn = unsafeAdd(calculator);\n\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const condition = haveSameCurrency([augend, addend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newAugend, newAddend] = normalizeFn([augend, addend]);\n\n    return addFn(newAugend, newAddend);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { INVALID_RATIOS_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport {\n  distribute,\n  equal,\n  getAmountAndScale,\n  greaterThan,\n  greaterThanOrEqual,\n  maximum,\n} from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\n\ntype UnsafeAllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount>>\n];\n\nfunction unsafeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  return function allocate(\n    ...[dineroObject, ratios]: UnsafeAllocateParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const distributeFn = distribute(calculator);\n    const shares = distributeFn(\n      amount,\n      ratios.map((ratio) => ratio.amount)\n    );\n\n    return shares.map((share) => {\n      return dineroObject.create({\n        amount: share,\n        currency,\n        scale,\n      });\n    });\n  };\n}\n\nexport type AllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount> | TAmount>\n];\n\nexport function safeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  const allocateFn = unsafeAllocate(calculator);\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n  const greaterThanFn = greaterThan(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n  return function allocate(...[dineroObject, ratios]: AllocateParams<TAmount>) {\n    const hasRatios = ratios.length > 0;\n    const scaledRatios = ratios.map((ratio) => getAmountAndScale(ratio, zero));\n    const highestRatioScale = hasRatios\n      ? maximumFn(scaledRatios.map(({ scale }) => scale))\n      : zero;\n    const normalizedRatios = scaledRatios.map(({ amount, scale }) => {\n      const factor = equalFn(scale, highestRatioScale)\n        ? zero\n        : calculator.subtract(highestRatioScale, scale);\n\n      return {\n        amount: calculator.multiply(amount, calculator.power(ten, factor)),\n        scale,\n      };\n    });\n    const hasOnlyPositiveRatios = normalizedRatios.every(({ amount }) =>\n      greaterThanOrEqualFn(amount, zero)\n    );\n    const hasOneNonZeroRatio = normalizedRatios.some(({ amount }) =>\n      greaterThanFn(amount, zero)\n    );\n\n    const condition = hasRatios && hasOnlyPositiveRatios && hasOneNonZeroRatio;\n    assert(condition, INVALID_RATIOS_MESSAGE);\n\n    const { scale } = dineroObject.toJSON();\n    const newScale = calculator.add(scale, highestRatioScale);\n\n    return allocateFn(convertScaleFn(dineroObject, newScale), normalizedRatios);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { compare as cmp } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type CompareParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const compareFn = cmp(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const compareFn = unsafeCompare(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n","import type { Calculator } from '../types';\n\ntype ComparisonCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a compare function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The compare function.\n */\nexport function compare<TAmount>(calculator: ComparisonCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { greaterThan as gt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type GreaterThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = gt(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanFn = unsafeGreaterThan(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { greaterThanOrEqual as gte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type GreaterThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = gte(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThanOrEqual<TAmount>(\n  calculator: Calculator<TAmount>\n) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanOrEqualFn = unsafeGreaterThanOrEqual(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { lessThan as lt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type LessThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lt(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanFn = unsafeLessThan(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { maximum as max } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type MaximumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const maxFn = max(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = maxFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const maxFn = unsafeMaximum(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return maxFn(normalizedDineroObjects);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type SubtractParams<TAmount> = readonly [\n  minuend: Dinero<TAmount>,\n  subtrahend: Dinero<TAmount>\n];\n\nfunction unsafeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const { amount: minuendAmount, currency, scale } = minuend.toJSON();\n    const { amount: subtrahendAmount } = subtrahend.toJSON();\n\n    const amount = calculator.subtract(minuendAmount, subtrahendAmount);\n\n    return minuend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const subtractFn = unsafeSubtract(calculator);\n\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const condition = haveSameCurrency([minuend, subtrahend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newMinuend, newSubtrahend] = normalizeFn([minuend, subtrahend]);\n\n    return subtractFn(newMinuend, newSubtrahend);\n  };\n}\n","import { toUnit } from './toUnit';\n\nimport type { Calculator, Dinero, Transformer } from '../types';\n\nexport type ToFormatParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer: Transformer<TAmount>\n];\n\nexport function toFormat<TAmount>(calculator: Calculator<TAmount>) {\n  const toUnitFn = toUnit(calculator);\n\n  return function toFormatFn(\n    ...[dineroObject, transformer]: ToFormatParams<TAmount>\n  ) {\n    const { currency, scale } = dineroObject.toJSON();\n    const amount = toUnitFn(dineroObject, { digits: scale });\n\n    return transformer({ amount, currency, dineroObject });\n  };\n}\n","import type { Dinero } from '../types';\n\nexport function toSnapshot<TAmount>(dineroObject: Dinero<TAmount>) {\n  return dineroObject.toJSON();\n}\n","import { countTrailingZeros, equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type TrimScaleParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function trimScale<TAmount>(calculator: Calculator<TAmount>) {\n  const countTrailingZerosFn = countTrailingZeros(calculator);\n  const equalFn = equal(calculator);\n  const maximumFn = maximum(calculator);\n  const transformScaleFn = transformScale(calculator);\n\n  return function trimScaleFn(...[dineroObject]: TrimScaleParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { base, exponent } = currency;\n\n    const trailingZerosLength = countTrailingZerosFn(amount, base);\n    const difference = calculator.subtract(scale, trailingZerosLength);\n    const newScale = maximumFn([difference, exponent]);\n\n    if (equalFn(newScale, scale)) {\n      return dineroObject;\n    }\n\n    return transformScaleFn(dineroObject, newScale);\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/no-expression-statement */\nimport { equal } from './equal';\n\nimport type { Calculator } from '../types';\n\ntype CountTrailingZerosCalculator<TAmount> = Calculator<TAmount>;\n\nexport function countTrailingZeros<TAmount>(\n  calculator: CountTrailingZerosCalculator<TAmount>\n) {\n  const equalFn = equal(calculator);\n\n  return (input: TAmount, base: TAmount) => {\n    const zero = calculator.zero();\n\n    let i = zero;\n    let temp = input;\n\n    while (equalFn(calculator.modulo(temp, base), zero)) {\n      temp = calculator.integerDivide(temp, base);\n      i = calculator.increment(i);\n    }\n\n    return i;\n  };\n}\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number up.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const up: RoundingMode = (value) => {\n  return Math.ceil(value);\n};\n"],"names":["ComparisonOperator","UNEQUAL_CURRENCIES_MESSAGE","assert","condition","message","Error","equal","calculator","subject","comparator","compare","EQ","greaterThan","GT","greaterThanOrEqual","lessThan","LT","distribute","value","ratios","equalFn","greaterThanFn","lessThanFn","greaterThanOrEqualFn","zero","one","increment","total","reduce","a","b","add","remainder","shares","map","ratio","share","integerDivide","multiply","subtract","isPositive","amount","decrement","i","getAmountAndScale","hasOwnProperty","scale","isEven","isHalf","Math","abs","maximum","values","acc","curr","haveSameCurrency","dineroObjects","firstDinero","otherDineros","toJSON","currency","every","d","code","base","exponent","transformScale","dineroObject","newScale","isNewScaleLarger","operation","terms","factor","power","create","normalizeScale","maximumFn","convertScaleFn","highestScale","highest","current","haveSameAmount","normalizeFn","comparatorAmount","subjectAmount","unsafeLessThanOrEqual","lessThanOrEqualFn","lte","unsafeMinimum","minFn","min","toUnit","options","round","identity","toNumber","toUnitFactor","digits","newCurrency","rates","rate","rateAmount","rateScale","onCreate","dinero","floor","sign","ceil","rounded","modulo","multiplicand","multiplier","multiplierAmount","multiplierScale","addFn","augend","addend","augendAmount","addendAmount","unsafeAdd","newAugend","newAddend","allocateFn","distributeFn","unsafeAllocate","ten","Array","fill","hasRatios","length","scaledRatios","highestRatioScale","normalizedRatios","hasOnlyPositiveRatios","hasOneNonZeroRatio","some","compareFn","cmp","unsafeCompare","gt","unsafeGreaterThan","gte","unsafeGreaterThanOrEqual","lt","unsafeLessThan","maxFn","max","unsafeMaximum","normalizedDineroObjects","subtractFn","minuend","subtrahend","minuendAmount","subtrahendAmount","unsafeSubtract","newMinuend","newSubtrahend","toUnitFn","transformer","countTrailingZerosFn","input","temp","countTrailingZeros","transformScaleFn","trailingZerosLength","difference"],"mappings":"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"}