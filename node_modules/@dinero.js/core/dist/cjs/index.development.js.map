{"version":3,"file":"index.development.js","sources":["../../src/checks/messages.ts","../../src/helpers/assert.ts","../../src/helpers/createDinero.ts","../../src/utils/compare.ts","../../src/types/Calculator.ts","../../src/utils/equal.ts","../../src/utils/countTrailingZeros.ts","../../src/utils/greaterThan.ts","../../src/utils/greaterThanOrEqual.ts","../../src/utils/lessThan.ts","../../src/utils/distribute.ts","../../src/utils/isScaledAmount.ts","../../src/utils/getAmountAndScale.ts","../../src/utils/isEven.ts","../../src/utils/isHalf.ts","../../src/utils/lessThanOrEqual.ts","../../src/utils/maximum.ts","../../src/utils/minimum.ts","../../src/api/haveSameCurrency.ts","../../src/api/transformScale.ts","../../src/api/normalizeScale.ts","../../src/api/add.ts","../../src/api/allocate.ts","../../src/api/compare.ts","../../src/api/convert.ts","../../src/api/haveSameAmount.ts","../../src/api/equal.ts","../../src/api/greaterThan.ts","../../src/api/greaterThanOrEqual.ts","../../src/api/hasSubUnits.ts","../../src/api/isNegative.ts","../../src/api/isPositive.ts","../../src/api/isZero.ts","../../src/api/lessThan.ts","../../src/api/lessThanOrEqual.ts","../../src/api/maximum.ts","../../src/api/minimum.ts","../../src/api/multiply.ts","../../src/api/subtract.ts","../../src/api/toUnit.ts","../../src/api/toFormat.ts","../../src/api/toSnapshot.ts","../../src/api/trimScale.ts","../../src/round/down.ts","../../src/round/halfAwayFromZero.ts","../../src/round/halfDown.ts","../../src/round/halfEven.ts","../../src/round/halfOdd.ts","../../src/round/halfTowardsZero.ts","../../src/round/halfUp.ts","../../src/round/up.ts"],"sourcesContent":["export const INVALID_AMOUNT_MESSAGE = 'Amount is invalid.';\nexport const INVALID_SCALE_MESSAGE = 'Scale is invalid.';\nexport const INVALID_RATIOS_MESSAGE = 'Ratios are invalid.';\nexport const UNEQUAL_SCALES_MESSAGE = 'Objects must have the same scale.';\nexport const UNEQUAL_CURRENCIES_MESSAGE =\n  'Objects must have the same currency.';\n","/* eslint-disable functional/no-throw-statement, valid-jsdoc */\n/**\n * Assert a condition.\n *\n * @param condition - The condition to verify.\n * @param message - The error message to throw.\n *\n * @throws If the condition isn't met.\n */\nexport function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(`[Dinero.js] ${message}`);\n  }\n}\n","/* eslint-disable functional/no-mixed-type, functional/no-return-void, functional/no-expression-statement */\nimport type { Calculator, Dinero, DineroOptions } from '../types';\n\nexport type CreateDineroOptions<TAmount> = {\n  readonly calculator: Calculator<TAmount>;\n  readonly onCreate?: (options: DineroOptions<TAmount>) => void;\n};\n\nexport function createDinero<TAmount>({\n  calculator,\n  onCreate,\n}: CreateDineroOptions<TAmount>) {\n  return function dinero({\n    amount,\n    currency,\n    scale = currency.exponent,\n  }: DineroOptions<TAmount>): Dinero<TAmount> {\n    onCreate?.({ amount, currency, scale });\n\n    return {\n      calculator,\n      create: dinero,\n      toJSON() {\n        return {\n          amount,\n          currency,\n          scale,\n        };\n      },\n    };\n  };\n}\n","import type { Calculator } from '../types';\n\ntype ComparisonCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a compare function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The compare function.\n */\nexport function compare<TAmount>(calculator: ComparisonCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator);\n  };\n}\n","/* eslint-disable functional/no-mixed-type */\nimport type { BinaryOperation, TransformOperation, UnaryOperation } from '.';\n\nexport enum ComparisonOperator {\n  LT = -1,\n  EQ = 0,\n  GT = 1,\n}\n\nexport type Calculator<TInput> = {\n  readonly add: BinaryOperation<TInput>;\n  readonly compare: BinaryOperation<TInput, ComparisonOperator>;\n  readonly decrement: UnaryOperation<TInput>;\n  readonly integerDivide: BinaryOperation<TInput>;\n  readonly increment: UnaryOperation<TInput>;\n  readonly modulo: BinaryOperation<TInput>;\n  readonly multiply: BinaryOperation<TInput>;\n  readonly power: BinaryOperation<TInput>;\n  readonly subtract: BinaryOperation<TInput>;\n  readonly toNumber: TransformOperation<TInput, number>;\n  readonly zero: () => TInput;\n};\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype EqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns an equal function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The equal function.\n */\nexport function equal<TAmount>(calculator: EqualCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.EQ;\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/no-expression-statement */\nimport { equal } from './equal';\n\nimport type { Calculator } from '../types';\n\ntype CountTrailingZerosCalculator<TAmount> = Calculator<TAmount>;\n\nexport function countTrailingZeros<TAmount>(\n  calculator: CountTrailingZerosCalculator<TAmount>\n) {\n  const equalFn = equal(calculator);\n\n  return (input: TAmount, base: TAmount) => {\n    const zero = calculator.zero();\n\n    let i = zero;\n    let temp = input;\n\n    while (equalFn(calculator.modulo(temp, base), zero)) {\n      temp = calculator.integerDivide(temp, base);\n      i = calculator.increment(i);\n    }\n\n    return i;\n  };\n}\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype GreaterThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThan function.\n */\nexport function greaterThan<TAmount>(\n  calculator: GreaterThanCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.GT;\n  };\n}\n","import { equal } from './equal';\nimport { greaterThan } from './greaterThan';\n\nimport type { Calculator } from '../types';\n\ntype GreaterThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThanOrEqual function.\n */\nexport function greaterThanOrEqual<TAmount>(\n  calculator: GreaterThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      greaterThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","import { ComparisonOperator } from '../types';\n\nimport type { Calculator } from '../types';\n\ntype LessThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThan function.\n */\nexport function lessThan<TAmount>(calculator: LessThanCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.LT;\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/immutable-data, functional/no-expression-statement */\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\nimport { greaterThanOrEqual } from './greaterThanOrEqual';\nimport { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype DistributeCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a distribute function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The distribute function.\n */\nexport function distribute<TAmount>(calculator: DistributeCalculator<TAmount>) {\n  return (value: TAmount, ratios: readonly TAmount[]) => {\n    const equalFn = equal(calculator);\n    const greaterThanFn = greaterThan(calculator);\n    const lessThanFn = lessThan(calculator);\n    const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n    const zero = calculator.zero();\n    const one = calculator.increment(zero);\n\n    const total = ratios.reduce((a, b) => calculator.add(a, b), zero);\n\n    if (equalFn(total, zero)) {\n      return ratios;\n    }\n\n    let remainder = value;\n\n    const shares = ratios.map((ratio) => {\n      const share =\n        calculator.integerDivide(calculator.multiply(value, ratio), total) ||\n        zero;\n\n      remainder = calculator.subtract(remainder, share);\n\n      return share;\n    });\n\n    const isPositive = greaterThanOrEqualFn(value, zero);\n    const compare = isPositive ? greaterThanFn : lessThanFn;\n    const amount = isPositive ? one : calculator.decrement(zero);\n\n    let i = 0;\n\n    while (compare(remainder, zero)) {\n      if (!equalFn(ratios[i], zero)) {\n        shares[i] = calculator.add(shares[i], amount);\n        remainder = calculator.subtract(remainder, amount);\n      }\n\n      i++;\n    }\n\n    return shares;\n  };\n}\n","import type { Rate, ScaledAmount } from '../types';\n\nexport function isScaledAmount<TAmount>(\n  amount: Rate<TAmount>\n): amount is ScaledAmount<TAmount> {\n  return (amount as ScaledAmount<TAmount>)?.hasOwnProperty('amount');\n}\n","import { isScaledAmount } from './isScaledAmount';\n\nimport type { ScaledAmount } from '../types';\n\nexport function getAmountAndScale<TAmount>(\n  value: ScaledAmount<TAmount> | TAmount,\n  zero: TAmount\n) {\n  if (isScaledAmount(value)) {\n    return { amount: value.amount, scale: value?.scale ?? zero };\n  }\n\n  return { amount: value, scale: zero };\n}\n","/**\n * Return whether a number is even.\n *\n * @param value - The number to test.\n *\n * @returns Whether the number is even.\n */\nexport function isEven(value: number) {\n  return value % 2 === 0;\n}\n","/**\n * Return whether a number is half.\n *\n * @param value - The number to test.\n *\n * @returns Whether the number is half.\n */\nexport function isHalf(value: number) {\n  return Math.abs(value) % 1 === 0.5;\n}\n","import { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype LessThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThanOrEqual function.\n */\nexport function lessThanOrEqual<TAmount>(\n  calculator: LessThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      lessThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","import { lessThan } from './lessThan';\n\nimport type { Calculator } from '../types';\n\ntype MaximumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a maximum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The maximum function.\n */\nexport function maximum<TAmount>(calculator: MaximumCalculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return lessThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import { greaterThan } from './greaterThan';\n\nimport type { Calculator } from '../types';\n\ntype MinimumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a minimum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The minimum function.\n */\nexport function minimum<TAmount>(calculator: MinimumCalculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return greaterThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import { equal } from '../utils';\n\nimport type { Dinero } from '../types';\n\nexport function haveSameCurrency<TAmount>(\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n) {\n  const [firstDinero, ...otherDineros] = dineroObjects;\n  const { currency: comparator } = firstDinero.toJSON();\n  const equalFn = equal(firstDinero.calculator);\n\n  return otherDineros.every((d) => {\n    const { currency: subject } = d.toJSON();\n\n    return (\n      subject.code === comparator.code &&\n      equalFn(subject.base, comparator.base) &&\n      equalFn(subject.exponent, comparator.exponent)\n    );\n  });\n}\n","import { greaterThan } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type TransformScaleParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newScale: TAmount\n];\n\nexport function transformScale<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return function transformScaleFn(\n    ...[dineroObject, newScale]: TransformScaleParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    const isNewScaleLarger = greaterThanFn(newScale, scale);\n    const operation = isNewScaleLarger\n      ? calculator.multiply\n      : calculator.integerDivide;\n    const terms = isNewScaleLarger\n      ? ([newScale, scale] as const)\n      : ([scale, newScale] as const);\n\n    const factor = calculator.power(\n      currency.base,\n      calculator.subtract(...terms)\n    );\n\n    return dineroObject.create({\n      amount: operation(amount, factor),\n      currency,\n      scale: newScale,\n    });\n  };\n}\n","import { equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type NormalizeScaleParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function normalizeScale<TAmount>(calculator: Calculator<TAmount>) {\n  const maximumFn = maximum(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _normalizeScale(\n    ...[dineroObjects]: NormalizeScaleParams<TAmount>\n  ) {\n    const highestScale = dineroObjects.reduce((highest, current) => {\n      const { scale } = current.toJSON();\n\n      return maximumFn([highest, scale]);\n    }, calculator.zero());\n\n    return dineroObjects.map((d) => {\n      const { scale } = d.toJSON();\n\n      return !equalFn(scale, highestScale)\n        ? convertScaleFn(d, highestScale)\n        : d;\n    });\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type AddParams<TAmount> = readonly [\n  augend: Dinero<TAmount>,\n  addend: Dinero<TAmount>\n];\n\nfunction unsafeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const { amount: augendAmount, currency, scale } = augend.toJSON();\n    const { amount: addendAmount } = addend.toJSON();\n\n    const amount = calculator.add(augendAmount, addendAmount);\n\n    return augend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const addFn = unsafeAdd(calculator);\n\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const condition = haveSameCurrency([augend, addend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newAugend, newAddend] = normalizeFn([augend, addend]);\n\n    return addFn(newAugend, newAddend);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { INVALID_RATIOS_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport {\n  distribute,\n  equal,\n  getAmountAndScale,\n  greaterThan,\n  greaterThanOrEqual,\n  maximum,\n} from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\n\ntype UnsafeAllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount>>\n];\n\nfunction unsafeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  return function allocate(\n    ...[dineroObject, ratios]: UnsafeAllocateParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const distributeFn = distribute(calculator);\n    const shares = distributeFn(\n      amount,\n      ratios.map((ratio) => ratio.amount)\n    );\n\n    return shares.map((share) => {\n      return dineroObject.create({\n        amount: share,\n        currency,\n        scale,\n      });\n    });\n  };\n}\n\nexport type AllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount> | TAmount>\n];\n\nexport function safeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  const allocateFn = unsafeAllocate(calculator);\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n  const greaterThanFn = greaterThan(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n  return function allocate(...[dineroObject, ratios]: AllocateParams<TAmount>) {\n    const hasRatios = ratios.length > 0;\n    const scaledRatios = ratios.map((ratio) => getAmountAndScale(ratio, zero));\n    const highestRatioScale = hasRatios\n      ? maximumFn(scaledRatios.map(({ scale }) => scale))\n      : zero;\n    const normalizedRatios = scaledRatios.map(({ amount, scale }) => {\n      const factor = equalFn(scale, highestRatioScale)\n        ? zero\n        : calculator.subtract(highestRatioScale, scale);\n\n      return {\n        amount: calculator.multiply(amount, calculator.power(ten, factor)),\n        scale,\n      };\n    });\n    const hasOnlyPositiveRatios = normalizedRatios.every(({ amount }) =>\n      greaterThanOrEqualFn(amount, zero)\n    );\n    const hasOneNonZeroRatio = normalizedRatios.some(({ amount }) =>\n      greaterThanFn(amount, zero)\n    );\n\n    const condition = hasRatios && hasOnlyPositiveRatios && hasOneNonZeroRatio;\n    assert(condition, INVALID_RATIOS_MESSAGE);\n\n    const { scale } = dineroObject.toJSON();\n    const newScale = calculator.add(scale, highestRatioScale);\n\n    return allocateFn(convertScaleFn(dineroObject, newScale), normalizedRatios);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { compare as cmp } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type CompareParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const compareFn = cmp(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const compareFn = unsafeCompare(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n","import { getAmountAndScale, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, Rates } from '../types';\nimport type { Currency } from '@dinero.js/currencies';\n\nexport type ConvertParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newCurrency: Currency<TAmount>,\n  rates: Rates<TAmount>\n];\n\nexport function convert<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const zero = calculator.zero();\n\n  return function convertFn(\n    ...[dineroObject, newCurrency, rates]: ConvertParams<TAmount>\n  ) {\n    const rate = rates[newCurrency.code];\n    const { amount, scale } = dineroObject.toJSON();\n    const { amount: rateAmount, scale: rateScale } = getAmountAndScale(\n      rate,\n      zero\n    );\n\n    const newScale = calculator.add(scale, rateScale);\n\n    return convertScaleFn(\n      dineroObject.create({\n        amount: calculator.multiply(amount, rateAmount),\n        currency: newCurrency,\n        scale: newScale,\n      }),\n      maximumFn([newScale, newCurrency.exponent])\n    );\n  };\n}\n","import { equal } from '../utils';\n\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type HaveSameAmountParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function haveSameAmount<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _haveSameAmount(\n    ...[dineroObjects]: HaveSameAmountParams<TAmount>\n  ) {\n    const [firstDinero, ...otherDineros] = normalizeFn(dineroObjects);\n    const { amount: comparatorAmount } = firstDinero.toJSON();\n\n    return otherDineros.every((d) => {\n      const { amount: subjectAmount } = d.toJSON();\n\n      return equalFn(subjectAmount, comparatorAmount);\n    });\n  };\n}\n","import { haveSameAmount } from './haveSameAmount';\nimport { haveSameCurrency } from './haveSameCurrency';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type EqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nexport function equal<TAmount>(calculator: Calculator<TAmount>) {\n  return function _equal(...[dineroObject, comparator]: EqualParams<TAmount>) {\n    return (\n      haveSameAmount(calculator)([dineroObject, comparator]) &&\n      haveSameCurrency([dineroObject, comparator])\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { greaterThan as gt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type GreaterThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = gt(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanFn = unsafeGreaterThan(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { greaterThanOrEqual as gte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type GreaterThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = gte(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThanOrEqual<TAmount>(\n  calculator: Calculator<TAmount>\n) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanOrEqualFn = unsafeGreaterThanOrEqual(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","import { equal } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type HasSubUnitsParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function hasSubUnits<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _hasSubUnits(...[dineroObject]: HasSubUnitsParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    return !equalFn(\n      calculator.modulo(amount, calculator.power(currency.base, scale)),\n      calculator.zero()\n    );\n  };\n}\n","import { lessThan } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsNegativeParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isNegative<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return function _isNegative(...[dineroObject]: IsNegativeParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return lessThanFn(amount, calculator.zero());\n  };\n}\n","import { greaterThanOrEqual } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsPositiveParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isPositive<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n  return function _isPositive(...[dineroObject]: IsPositiveParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return greaterThanOrEqualFn(amount, calculator.zero());\n  };\n}\n","import { equal } from '../utils';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type IsZeroParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function isZero<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _isZero(...[dineroObject]: IsZeroParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return equalFn(amount, calculator.zero());\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { lessThan as lt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type LessThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lt(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanFn = unsafeLessThan(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { lessThanOrEqual as lte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type LessThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanOrEqualFn = lte(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanOrEqualFn = unsafeLessThanOrEqual(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { maximum as max } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type MaximumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const maxFn = max(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = maxFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const maxFn = unsafeMaximum(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return maxFn(normalizedDineroObjects);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport { minimum as min } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type MinimumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const minFn = min(calculator);\n\n  return function minimum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = minFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const minFn = unsafeMinimum(calculator);\n\n  return function maximum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return minFn(normalizedDineroObjects);\n  };\n}\n","import { getAmountAndScale } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\n\nexport type MultiplyParams<TAmount> = readonly [\n  multiplicand: Dinero<TAmount>,\n  multiplier: ScaledAmount<TAmount> | TAmount\n];\n\nexport function multiply<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const zero = calculator.zero();\n\n  return function multiplyFn(\n    ...[multiplicand, multiplier]: MultiplyParams<TAmount>\n  ) {\n    const { amount, currency, scale } = multiplicand.toJSON();\n    const { amount: multiplierAmount, scale: multiplierScale } =\n      getAmountAndScale(multiplier, zero);\n\n    const newScale = calculator.add(scale, multiplierScale);\n\n    return convertScaleFn(\n      multiplicand.create({\n        amount: calculator.multiply(amount, multiplierAmount),\n        currency,\n        scale: newScale,\n      }),\n      newScale\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type SubtractParams<TAmount> = readonly [\n  minuend: Dinero<TAmount>,\n  subtrahend: Dinero<TAmount>\n];\n\nfunction unsafeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const { amount: minuendAmount, currency, scale } = minuend.toJSON();\n    const { amount: subtrahendAmount } = subtrahend.toJSON();\n\n    const amount = calculator.subtract(minuendAmount, subtrahendAmount);\n\n    return minuend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const subtractFn = unsafeSubtract(calculator);\n\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const condition = haveSameCurrency([minuend, subtrahend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newMinuend, newSubtrahend] = normalizeFn([minuend, subtrahend]);\n\n    return subtractFn(newMinuend, newSubtrahend);\n  };\n}\n","import type { Calculator, Dinero, RoundingOptions } from '../types';\n\nexport type ToUnitParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  options?: RoundingOptions<TAmount>\n];\n\nexport function toUnit<TAmount>(calculator: Calculator<TAmount>) {\n  return function toUnitFn(...[dineroObject, options]: ToUnitParams<TAmount>) {\n    const round = options?.round || identity;\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { power, toNumber } = calculator;\n\n    const toUnitFactor = toNumber(power(currency.base, scale));\n    const factor = toNumber(power(currency.base, options?.digits ?? scale));\n\n    return round((toNumber(amount) / toUnitFactor) * factor) / factor;\n  };\n}\n\nfunction identity<TValue>(value: TValue) {\n  return value;\n}\n","import { toUnit } from './toUnit';\n\nimport type { Calculator, Dinero, Transformer } from '../types';\n\nexport type ToFormatParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer: Transformer<TAmount>\n];\n\nexport function toFormat<TAmount>(calculator: Calculator<TAmount>) {\n  const toUnitFn = toUnit(calculator);\n\n  return function toFormatFn(\n    ...[dineroObject, transformer]: ToFormatParams<TAmount>\n  ) {\n    const { currency, scale } = dineroObject.toJSON();\n    const amount = toUnitFn(dineroObject, { digits: scale });\n\n    return transformer({ amount, currency, dineroObject });\n  };\n}\n","import type { Dinero } from '../types';\n\nexport function toSnapshot<TAmount>(dineroObject: Dinero<TAmount>) {\n  return dineroObject.toJSON();\n}\n","import { countTrailingZeros, equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nimport type { Calculator, Dinero } from '../types';\n\nexport type TrimScaleParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function trimScale<TAmount>(calculator: Calculator<TAmount>) {\n  const countTrailingZerosFn = countTrailingZeros(calculator);\n  const equalFn = equal(calculator);\n  const maximumFn = maximum(calculator);\n  const transformScaleFn = transformScale(calculator);\n\n  return function trimScaleFn(...[dineroObject]: TrimScaleParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { base, exponent } = currency;\n\n    const trailingZerosLength = countTrailingZerosFn(amount, base);\n    const difference = calculator.subtract(scale, trailingZerosLength);\n    const newScale = maximumFn([difference, exponent]);\n\n    if (equalFn(newScale, scale)) {\n      return dineroObject;\n    }\n\n    return transformScaleFn(dineroObject, newScale);\n  };\n}\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number down.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const down: RoundingMode = (value) => {\n  return Math.floor(value);\n};\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest integer farthest from zero.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfAwayFromZero: RoundingMode = (value) => {\n  return isHalf(value)\n    ? Math.sign(value) * Math.ceil(Math.abs(value))\n    : Math.round(value);\n};\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values down.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfDown: RoundingMode = (value) => {\n  return isHalf(value) ? Math.floor(value) : Math.round(value);\n};\n","import { isEven, isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest even integer.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfEven: RoundingMode = (value) => {\n  const rounded = Math.round(value);\n\n  if (!isHalf(value)) {\n    return rounded;\n  }\n\n  return isEven(rounded) ? rounded : rounded - 1;\n};\n","import { isEven, isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest odd integer.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfOdd: RoundingMode = (value) => {\n  const rounded = Math.round(value);\n\n  if (!isHalf(value)) {\n    return rounded;\n  }\n\n  return isEven(rounded) ? rounded - 1 : rounded;\n};\n","import { isHalf } from '../utils';\n\nimport type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values to nearest integer closest to zero.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfTowardsZero: RoundingMode = (value) => {\n  return isHalf(value)\n    ? Math.sign(value) * Math.floor(Math.abs(value))\n    : Math.round(value);\n};\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number with half values up.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const halfUp: RoundingMode = (value) => {\n  return Math.round(value);\n};\n","import type { RoundingMode } from '../types';\n\n/**\n * Round a number up.\n *\n * @param value - The number to round.\n *\n * @returns The rounded number.\n */\nexport const up: RoundingMode = (value) => {\n  return Math.ceil(value);\n};\n"],"names":["INVALID_AMOUNT_MESSAGE","INVALID_SCALE_MESSAGE","INVALID_RATIOS_MESSAGE","UNEQUAL_SCALES_MESSAGE","UNEQUAL_CURRENCIES_MESSAGE","assert","condition","message","Error","createDinero","calculator","onCreate","dinero","amount","currency","scale","exponent","create","toJSON","compare","subject","comparator","ComparisonOperator","equal","EQ","countTrailingZeros","equalFn","input","base","zero","i","temp","modulo","integerDivide","increment","greaterThan","GT","greaterThanOrEqual","lessThan","LT","distribute","value","ratios","greaterThanFn","lessThanFn","greaterThanOrEqualFn","one","total","reduce","a","b","add","remainder","shares","map","ratio","share","multiply","subtract","isPositive","decrement","isScaledAmount","hasOwnProperty","getAmountAndScale","isEven","isHalf","Math","abs","lessThanOrEqual","maximum","values","acc","curr","minimum","haveSameCurrency","dineroObjects","firstDinero","otherDineros","every","d","code","transformScale","transformScaleFn","dineroObject","newScale","isNewScaleLarger","operation","terms","factor","power","normalizeScale","maximumFn","convertScaleFn","_normalizeScale","highestScale","highest","current","unsafeAdd","augend","addend","augendAmount","addendAmount","safeAdd","normalizeFn","addFn","newAugend","newAddend","unsafeAllocate","allocate","distributeFn","safeAllocate","allocateFn","ten","Array","fill","hasRatios","length","scaledRatios","highestRatioScale","normalizedRatios","hasOnlyPositiveRatios","hasOneNonZeroRatio","some","unsafeCompare","compareFn","cmp","subjectAmount","comparatorAmount","safeCompare","convert","convertFn","newCurrency","rates","rate","rateAmount","rateScale","haveSameAmount","_haveSameAmount","_equal","unsafeGreaterThan","gt","safeGreaterThan","unsafeGreaterThanOrEqual","gte","safeGreaterThanOrEqual","hasSubUnits","_hasSubUnits","isNegative","_isNegative","_isPositive","isZero","_isZero","unsafeLessThan","lt","safeLessThan","unsafeLessThanOrEqual","lessThanOrEqualFn","lte","safeLessThanOrEqual","unsafeMaximum","maxFn","max","safeMaximum","normalizedDineroObjects","unsafeMinimum","minFn","min","safeMinimum","multiplyFn","multiplicand","multiplier","multiplierAmount","multiplierScale","unsafeSubtract","minuend","subtrahend","minuendAmount","subtrahendAmount","safeSubtract","subtractFn","newMinuend","newSubtrahend","toUnit","toUnitFn","options","round","identity","toNumber","toUnitFactor","digits","toFormat","toFormatFn","transformer","toSnapshot","trimScale","countTrailingZerosFn","trimScaleFn","trailingZerosLength","difference","down","floor","halfAwayFromZero","sign","ceil","halfDown","halfEven","rounded","halfOdd","halfTowardsZero","halfUp","up"],"mappings":"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"}