{"version":3,"file":"index.development.js","sources":["../../src/api/add.ts","../../../core/dist/esm/types/Calculator.js","../../src/api/compare.ts","../../src/api/decrement.ts","../../src/api/increment.ts","../../src/api/integerDivide.ts","../../src/api/modulo.ts","../../src/api/multiply.ts","../../src/api/power.ts","../../src/api/subtract.ts","../../src/api/toNumber.ts","../../src/api/zero.ts","../../src/calculator.ts"],"sourcesContent":["import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the sum of two numbers.\n *\n * @param augend - The number to add to.\n * @param addend - The number to add.\n *\n * @returns The sum of the two numbers.\n */\nexport const add: BinaryOperation<number> = (augend, addend) => {\n  return augend + addend;\n};\n","/* eslint-disable functional/no-mixed-type */\nexport var ComparisonOperator;\n\n(function (ComparisonOperator) {\n  ComparisonOperator[ComparisonOperator[\"LT\"] = -1] = \"LT\";\n  ComparisonOperator[ComparisonOperator[\"EQ\"] = 0] = \"EQ\";\n  ComparisonOperator[ComparisonOperator[\"GT\"] = 1] = \"GT\";\n})(ComparisonOperator || (ComparisonOperator = {}));","import { ComparisonOperator } from '@dinero.js/core';\n\nimport type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Compare two numbers.\n *\n * @param a - The first number to compare.\n * @param b - The second number to compare.\n *\n * @returns Whether the two numbers are equal, or whether the first one is greater or less than the other.\n */\nexport const compare: BinaryOperation<number, ComparisonOperator> = (a, b) => {\n  if (a < b) {\n    return ComparisonOperator.LT;\n  }\n  if (a > b) {\n    return ComparisonOperator.GT;\n  }\n  return ComparisonOperator.EQ;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an decremented number.\n *\n * @param value - The number to decrement.\n *\n * @returns The decremented number.\n */\nexport const decrement: UnaryOperation<number> = (value) => {\n  return value - 1;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an incremented number.\n *\n * @param value - The number to increment.\n *\n * @returns The incremented number.\n */\nexport const increment: UnaryOperation<number> = (value) => {\n  return value + 1;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the quotient of two numbers with no fractional part.\n *\n * @param dividend - The number to divide.\n * @param divisor - The number to divide with.\n *\n * @returns The quotient of the two numbers.\n */\nexport const integerDivide: BinaryOperation<number> = (dividend, divisor) => {\n  return Math.trunc(dividend / divisor);\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the remainder of two numbers.\n *\n * @param dividend - The number to divide.\n * @param divisor - The number to divide with.\n *\n * @returns The remainder of the two numbers.\n */\nexport const modulo: BinaryOperation<number> = (dividend, divisor) => {\n  return dividend % divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the product of two numbers.\n *\n * @param multiplicand - The number to multiply.\n * @param multiplier - The number to multiply with.\n *\n * @returns The product of the two numbers.\n */\nexport const multiply: BinaryOperation<number> = (multiplicand, multiplier) => {\n  return multiplicand * multiplier;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an number to the power of an exponent.\n *\n * @param base - The base number.\n * @param exponent - The exponent to raise the base to.\n *\n * @returns The base to the power of the exponent.\n */\nexport const power: BinaryOperation<number> = (base, exponent) => {\n  return base ** exponent;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the difference between two numbers.\n *\n * @param minuend - The number to subtract from.\n * @param subtrahend - The number to subtract.\n *\n * @returns The difference of the two numbers.\n */\nexport const subtract: BinaryOperation<number> = (minuend, subtrahend) => {\n  return minuend - subtrahend;\n};\n","import type { TransformOperation } from '@dinero.js/core';\n\n/**\n * Transforms an value to a number.\n *\n * @param input - The value to transform.\n *\n * @returns The transformed value.\n */\nexport const toNumber: TransformOperation<number, number> = (input) => input;\n","/**\n * Return zero as a number.\n *\n * @returns Zero as a number.\n */\nexport function zero() {\n  return 0;\n}\n","import {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  toNumber,\n  zero,\n} from './api';\n\nexport const calculator = {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  toNumber,\n  zero,\n};\n"],"names":["add","augend","addend","ComparisonOperator","compare","a","b","LT","GT","EQ","decrement","value","increment","integerDivide","dividend","divisor","Math","trunc","modulo","multiply","multiplicand","multiplier","power","base","exponent","subtract","minuend","subtrahend","toNumber","input","zero","calculator"],"mappings":"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"}